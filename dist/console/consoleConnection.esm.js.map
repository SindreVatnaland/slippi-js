{"version":3,"file":"consoleConnection.esm.js","sources":["../../src/console/consoleConnection.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport net from \"net\";\nimport inject from \"reconnect-core\";\n\nimport type { CommunicationMessage } from \"./communication\";\nimport { CommunicationType, ConsoleCommunication } from \"./communication\";\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nexport const NETWORK_MESSAGE = \"HELO\\0\";\n\nconst DEFAULT_CONNECTION_TIMEOUT_MS = 20000;\n\nenum CommunicationState {\n  INITIAL = \"initial\",\n  LEGACY = \"legacy\",\n  NORMAL = \"normal\",\n}\n\nconst defaultConnectionDetails: ConnectionDetails = {\n  consoleNick: \"unknown\",\n  gameDataCursor: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),\n  version: \"\",\n  clientToken: 0,\n};\n\nconst consoleConnectionOptions = {\n  autoReconnect: true,\n};\n\nexport type ConsoleConnectionOptions = typeof consoleConnectionOptions;\n\n/**\n * Responsible for maintaining connection to a Slippi relay connection or Wii connection.\n * Events are emitted whenever data is received.\n *\n * Basic usage example:\n *\n * ```javascript\n * const { ConsoleConnection } = require(\"@slippi/slippi-js\");\n *\n * const connection = new ConsoleConnection();\n * connection.connect(\"localhost\", 667); // You should set these values appropriately\n *\n * connection.on(\"data\", (data) => {\n *   // Received data from console\n *   console.log(data);\n * });\n *\n * connection.on(\"statusChange\", (status) => {\n *   console.log(`status changed: ${status}`);\n * });\n * ```\n */\nexport class ConsoleConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private isRealtime: boolean;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private connDetails: ConnectionDetails = { ...defaultConnectionDetails };\n  private client: net.Socket | null = null;\n  private connection: inject.Instance<unknown, net.Socket> | null = null;\n  private options: ConsoleConnectionOptions;\n  private shouldReconnect = false;\n\n  public constructor(options?: Partial<ConsoleConnectionOptions>) {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n    this.isRealtime = false;\n    this.options = Object.assign({}, consoleConnectionOptions, options);\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  /**\n   * @returns The specific details about the connected console.\n   */\n  public getDetails(): ConnectionDetails {\n    return { ...this.connDetails };\n  }\n\n  /**\n   * Initiate a connection to the Wii or Slippi relay.\n   * @param ip   The IP address of the Wii or Slippi relay.\n   * @param port The port to connect to.\n   * @param isRealtime Optional. A flag to tell the Wii to send data as quickly as possible\n   * @param timeout Optional. The timeout in milliseconds when attempting to connect\n   *                to the Wii or relay.\n   */\n  public connect(ip: string, port: number, isRealtime = false, timeout = DEFAULT_CONNECTION_TIMEOUT_MS): void {\n    this.ipAddress = ip;\n    this.port = port;\n    this.isRealtime = isRealtime;\n    this._connectOnPort(ip, port, timeout);\n  }\n\n  private _connectOnPort(ip: string, port: number, timeout: number): void {\n    // set up reconnect\n    const reconnect = inject(() =>\n      net.connect({\n        host: ip,\n        port: port,\n        timeout: timeout,\n      }),\n    );\n\n    // Indicate we are connecting\n    this._setStatus(ConnectionStatus.CONNECTING);\n\n    // Prepare console communication obj for talking UBJSON\n    const consoleComms = new ConsoleCommunication();\n\n    // TODO: reconnect on failed reconnect, not sure how\n    // TODO: to do this\n    const connection = reconnect(\n      {\n        initialDelay: 2000,\n        maxDelay: 10000,\n        strategy: \"fibonacci\",\n        failAfter: Infinity,\n      },\n      (client) => {\n        this.emit(ConnectionEvent.CONNECT);\n        // We successfully connected so turn on auto-reconnect\n        this.shouldReconnect = this.options.autoReconnect;\n        this.client = client;\n\n        let commState: CommunicationState = CommunicationState.INITIAL;\n        client.on(\"data\", (data) => {\n          if (commState === CommunicationState.INITIAL) {\n            commState = this._getInitialCommState(data);\n            console.log(`Connected to ${ip}:${port} with type: ${commState}`);\n            this._setStatus(ConnectionStatus.CONNECTED);\n            console.log(data.toString(\"hex\"));\n          }\n\n          if (commState === CommunicationState.LEGACY) {\n            // If the first message received was not a handshake message, either we\n            // connected to an old Nintendont version or a relay instance\n            this._handleReplayData(data);\n            return;\n          }\n\n          try {\n            consoleComms.receive(data);\n          } catch (err) {\n            console.error(\"Failed to process new data from server...\", {\n              error: err,\n              prevDataBuf: consoleComms.getReceiveBuffer(),\n              rcvData: data,\n            });\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n            return;\n          }\n          const messages = consoleComms.getMessages();\n\n          // Process all of the received messages\n          try {\n            messages.forEach((message) => this._processMessage(message));\n          } catch (err) {\n            // Disconnect client to send another handshake message\n            console.error(err);\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n          }\n        });\n\n        client.on(\"timeout\", () => {\n          // const previouslyConnected = this.connectionStatus === ConnectionStatus.CONNECTED;\n          console.warn(`Attempted connection to ${ip}:${port} timed out after ${timeout}ms`);\n          client.destroy();\n        });\n\n        client.on(\"end\", () => {\n          console.log(\"disconnect\");\n          if (!this.shouldReconnect) {\n            client.destroy();\n          }\n        });\n\n        client.on(\"close\", () => {\n          console.log(\"connection was closed\");\n        });\n\n        const handshakeMsgOut = consoleComms.genHandshakeOut(\n          this.connDetails.gameDataCursor as Uint8Array,\n          this.connDetails.clientToken ?? 0,\n          this.isRealtime,\n        );\n\n        client.write(handshakeMsgOut);\n      },\n    );\n\n    const setConnectingStatus = (): void => {\n      // Indicate we are connecting\n      this._setStatus(this.shouldReconnect ? ConnectionStatus.RECONNECT_WAIT : ConnectionStatus.CONNECTING);\n    };\n\n    connection.on(\"connect\", setConnectingStatus);\n    connection.on(\"reconnect\", setConnectingStatus);\n\n    connection.on(\"disconnect\", () => {\n      if (!this.shouldReconnect) {\n        connection.reconnect = false;\n        connection.disconnect();\n        this._setStatus(ConnectionStatus.DISCONNECTED);\n      }\n      // TODO: Figure out how to set RECONNECT_WAIT state here. Currently it will stay on\n      // TODO: Connecting... forever\n    });\n\n    connection.on(\"error\", (err) => {\n      console.warn(`Connection on port ${port} encountered an error.`, err);\n\n      this._setStatus(ConnectionStatus.DISCONNECTED);\n      this.emit(ConnectionEvent.ERROR, `Connection on port ${port} encountered an error.\\n${err}`);\n    });\n\n    this.connection = connection;\n    connection.connect(port);\n  }\n\n  /**\n   * Terminate the current connection.\n   */\n  public disconnect(): void {\n    // Prevent reconnections and disconnect\n    if (this.connection) {\n      this.connection.reconnect = false;\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.client) {\n      this.client.destroy();\n    }\n  }\n\n  private _getInitialCommState(data: Buffer): CommunicationState {\n    if (data.length < 13) {\n      return CommunicationState.LEGACY;\n    }\n\n    const openingBytes = Buffer.from([0x7b, 0x69, 0x04, 0x74, 0x79, 0x70, 0x65, 0x55, 0x01]);\n\n    const dataStart = data.slice(4, 13);\n\n    return dataStart.equals(openingBytes) ? CommunicationState.NORMAL : CommunicationState.LEGACY;\n  }\n\n  private _processMessage(message: CommunicationMessage): void {\n    this.emit(ConnectionEvent.MESSAGE, message);\n    switch (message.type) {\n      case CommunicationType.KEEP_ALIVE:\n        // console.log(\"Keep alive message received\");\n\n        // TODO: This is the jankiest shit ever but it will allow for relay connections not\n        // TODO: to time out as long as the main connection is still receving keep alive messages\n        // TODO: Need to figure out a better solution for this. There should be no need to have an\n        // TODO: active Wii connection for the relay connection to keep itself alive\n        const fakeKeepAlive = Buffer.from(NETWORK_MESSAGE);\n        this._handleReplayData(fakeKeepAlive);\n\n        break;\n      case CommunicationType.REPLAY:\n        const readPos = Uint8Array.from(message.payload.pos);\n        const cmp = Buffer.compare(this.connDetails.gameDataCursor as Uint8Array, readPos);\n        if (!message.payload.forcePos && cmp !== 0) {\n          // The readPos is not the one we are waiting on, throw error\n          throw new Error(\n            `Position of received data is incorrect. Expected: ${this.connDetails.gameDataCursor.toString()}, Received: ${readPos.toString()}`,\n          );\n        }\n\n        if (message.payload.forcePos) {\n          console.warn(\n            \"Overflow occured in Nintendont, data has likely been skipped and replay corrupted. \" +\n              \"Expected, Received:\",\n            this.connDetails.gameDataCursor,\n            readPos,\n          );\n        }\n\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.nextPos);\n\n        const data = Uint8Array.from(message.payload.data);\n        this._handleReplayData(data);\n        break;\n      case CommunicationType.HANDSHAKE:\n        const { nick, nintendontVersion } = message.payload;\n        if (nick) {\n          this.connDetails.consoleNick = nick;\n        }\n        const tokenBuf = Buffer.from(message.payload.clientToken);\n        this.connDetails.clientToken = tokenBuf.readUInt32BE(0);\n        if (nintendontVersion) {\n          this.connDetails.version = nintendontVersion;\n        }\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.pos);\n        this.emit(ConnectionEvent.HANDSHAKE, this.connDetails);\n        break;\n      default:\n        // Should this be an error?\n        break;\n    }\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n}\n"],"names":["NETWORK_MESSAGE","DEFAULT_CONNECTION_TIMEOUT_MS","CommunicationState","defaultConnectionDetails","consoleNick","gameDataCursor","Uint8Array","from","version","clientToken","consoleConnectionOptions","autoReconnect","ConsoleConnection","EventEmitter","constructor","options","ipAddress","port","isRealtime","connectionStatus","ConnectionStatus","DISCONNECTED","connDetails","client","connection","shouldReconnect","Ports","DEFAULT","Object","assign","getStatus","getSettings","getDetails","connect","ip","timeout","_connectOnPort","reconnect","inject","net","host","_setStatus","CONNECTING","consoleComms","ConsoleCommunication","initialDelay","maxDelay","strategy","failAfter","Infinity","_this$connDetails$cli","emit","ConnectionEvent","CONNECT","commState","INITIAL","on","data","_getInitialCommState","console","log","CONNECTED","toString","LEGACY","_handleReplayData","receive","err","error","prevDataBuf","getReceiveBuffer","rcvData","destroy","ERROR","messages","getMessages","forEach","message","_processMessage","warn","handshakeMsgOut","genHandshakeOut","write","setConnectingStatus","RECONNECT_WAIT","disconnect","length","openingBytes","Buffer","dataStart","slice","equals","NORMAL","MESSAGE","type","CommunicationType","KEEP_ALIVE","fakeKeepAlive","REPLAY","readPos","payload","pos","cmp","compare","forcePos","Error","nextPos","HANDSHAKE","nick","nintendontVersion","tokenBuf","readUInt32BE","DATA","status","STATUS_CHANGE"],"mappings":"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"}