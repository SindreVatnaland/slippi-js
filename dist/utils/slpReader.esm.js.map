{"version":3,"file":"slpReader.esm.js","sources":["../../src/utils/slpReader.ts"],"sourcesContent":["import { decode } from \"@shelacek/ubjson\";\nimport fs from \"fs\";\nimport iconv from \"iconv-lite\";\nimport mapValues from \"lodash/mapValues\";\n\nimport type {\n  EventCallbackFunc,\n  EventPayloadTypes,\n  GameEndType,\n  GameInfoType,\n  GameStartType,\n  GeckoCodeType,\n  MetadataType,\n  PlacementType,\n  PlayerType,\n  PostFrameUpdateType,\n  SelfInducedSpeedsType,\n} from \"../types\";\nimport { Command } from \"../types\";\nimport { exists } from \"./exists\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\ntype SlpFileReadInput = {\n  source: SlpInputSource.FILE;\n  filePath: string;\n};\n\ntype SlpBufferReadInput = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nexport type SlpReadInput = SlpFileReadInput | SlpBufferReadInput;\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport type SlpFileType = {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n};\n\nexport type SlpFileSourceRef = {\n  source: SlpInputSource.FILE;\n  fileDescriptor: number;\n};\n\nexport type SlpBufferSourceRef = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.FILE:\n      if (!input.filePath) {\n        throw new Error(\"File source requires a file path\");\n      }\n      const fd = fs.openSync(input.filePath, \"r\");\n      return {\n        source: input.source,\n        fileDescriptor: fd,\n      };\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      };\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      return fs.readSync(ref.fileDescriptor, buffer, offset, length, position);\n    case SlpInputSource.BUFFER:\n      if (position >= ref.buffer.length) {\n        return 0;\n      }\n      return ref.buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      const fileStats = fs.fstatSync(ref.fileDescriptor);\n      return fileStats.size;\n    case SlpInputSource.BUFFER:\n      return ref.buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n    case SlpInputSource.FILE:\n      fs.closeSync(file.ref.fileDescriptor);\n      break;\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\nfunction getEnabledItems(view: DataView): number {\n  const offsets = [0x1, 0x100, 0x10000, 0x1000000, 0x100000000];\n  const enabledItems = offsets.reduce((acc, byteOffset, index) => {\n    const byte = readUint8(view, 0x28 + index) as number;\n    return acc + byte * byteOffset;\n  }, 0);\n\n  return enabledItems;\n}\n\nfunction getGameInfoBlock(view: DataView): GameInfoType {\n  const offset = 0x5;\n\n  return {\n    gameBitfield1: readUint8(view, 0x0 + offset),\n    gameBitfield2: readUint8(view, 0x1 + offset),\n    gameBitfield3: readUint8(view, 0x2 + offset),\n    gameBitfield4: readUint8(view, 0x3 + offset),\n    bombRainEnabled: (readUint8(view, 0x6 + offset)! & 0xff) > 0 ? true : false,\n    selfDestructScoreValue: readInt8(view, 0xc + offset),\n    itemSpawnBitfield1: readUint8(view, 0x23 + offset),\n    itemSpawnBitfield2: readUint8(view, 0x24 + offset),\n    itemSpawnBitfield3: readUint8(view, 0x25 + offset),\n    itemSpawnBitfield4: readUint8(view, 0x26 + offset),\n    itemSpawnBitfield5: readUint8(view, 0x27 + offset),\n    damageRatio: readFloat(view, 0x30 + offset),\n  };\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n  let splitMessageBuffer = new Uint8Array(0);\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    let commandByte = (commandByteBuffer[0] as number) ?? 0;\n    let buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    const advanceAmount = buffer.length;\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    if (commandByte === Command.SPLIT_MESSAGE) {\n      // Here we have a split message, we will collect data from them until the last\n      // message of the list is received\n      const view = new DataView(buffer.buffer);\n      const size = readUint16(view, 0x201) ?? 512;\n      const isLastMessage = readBool(view, 0x204);\n      const internalCommand = readUint8(view, 0x203) ?? 0;\n\n      // If this is the first message, initialize the splitMessageBuffer\n      // with the internal command byte because our parseMessage function\n      // seems to expect a command byte at the start\n      if (splitMessageBuffer.length === 0) {\n        splitMessageBuffer = new Uint8Array(1);\n        splitMessageBuffer[0] = internalCommand;\n      }\n\n      // Collect new data into splitMessageBuffer\n      const appendBuf = buffer.slice(0x1, 0x1 + size);\n      const mergedBuf = new Uint8Array(splitMessageBuffer.length + appendBuf.length);\n      mergedBuf.set(splitMessageBuffer);\n      mergedBuf.set(appendBuf, splitMessageBuffer.length);\n      splitMessageBuffer = mergedBuf;\n\n      if (isLastMessage) {\n        commandByte = splitMessageBuffer[0] ?? 0;\n        buffer = splitMessageBuffer;\n        splitMessageBuffer = new Uint8Array(0);\n      }\n    }\n\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload, buffer);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += advanceAmount;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        const playerInfo: PlayerType = {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          type: readUint8(view, 0x66 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          teamShade: readUint8(view, 0x6c + offset),\n          handicap: readUint8(view, 0x6d + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          staminaMode: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x01)),\n          silentCharacter: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x02)),\n          lowGravity: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x04)),\n          invisible: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x08)),\n          blackStockIcon: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x10)),\n          metal: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x20)),\n          startOnAngelPlatform: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x40)),\n          rumbleEnabled: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x80)),\n          cpuLevel: readUint8(view, 0x74 + offset),\n          offenseRatio: readFloat(view, 0x7d + offset),\n          defenseRatio: readFloat(view, 0x81 + offset),\n          modelScale: readFloat(view, 0x85 + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n        return playerInfo;\n      };\n\n      const matchIdLength = 51;\n      const matchIdStart = 0x2be;\n      const matchIdBuf = payload.slice(matchIdStart, matchIdStart + matchIdLength);\n      const matchIdString = iconv\n        .decode(matchIdBuf as Buffer, \"utf8\")\n        .split(\"\\0\")\n        .shift();\n      const matchId = matchIdString ?? \"\";\n\n      const gameSettings: GameStartType = {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        timerType: readUint8(view, 0x5, 0x03),\n        inGameMode: readUint8(view, 0x5, 0xe0),\n        friendlyFireEnabled: !!readUint8(view, 0x6, 0x01),\n        isTeams: readBool(view, 0xd),\n        itemSpawnBehavior: readUint8(view, 0x10),\n        stageId: readUint16(view, 0x13),\n        startingTimerSeconds: readUint32(view, 0x15),\n        enabledItems: getEnabledItems(view),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n        language: readUint8(view, 0x2bd),\n        gameInfoBlock: getGameInfoBlock(view),\n        randomSeed: readUint32(view, 0x13d),\n        isPAL: readBool(view, 0x1a1),\n        isFrozenPS: readBool(view, 0x1a2),\n        matchInfo: {\n          matchId,\n          gameNumber: readUint32(view, 0x2f1),\n          tiebreakerNumber: readUint32(view, 0x2f5),\n        },\n      };\n      return gameSettings;\n    case Command.FRAME_START:\n      return {\n        frame: readInt32(view, 0x1),\n        seed: readUint32(view, 0x5),\n        sceneFrameCounter: readUint32(view, 0x9),\n      };\n\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        rawJoystickX: readInt8(view, 0x3b),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n        hitlagRemaining: readFloat(view, 0x49),\n        animationIndex: readUint32(view, 0x4d),\n        instanceHitBy: readUint16(view, 0x51),\n        instanceId: readUint16(view, 0x53),\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n        instanceId: readUint16(view, 0x2b),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      const placements = [0, 1, 2, 3].map((playerIndex): PlacementType => {\n        const position = readInt8(view, 0x3 + playerIndex);\n        return { playerIndex, position };\n      });\n\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n        placements,\n      };\n    case Command.GECKO_LIST:\n      const codes: GeckoCodeType[] = [];\n      let pos = 1;\n      while (pos < payload.length) {\n        const word1 = readUint32(view, pos) ?? 0;\n        const codetype = (word1 >> 24) & 0xfe;\n        const address = (word1 & 0x01ffffff) + 0x80000000;\n\n        let offset = 8; // Default code length, most codes are this length\n        if (codetype === 0xc0 || codetype === 0xc2) {\n          const lineCount = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + lineCount * 8;\n        } else if (codetype === 0x06) {\n          const byteLen = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + ((byteLen + 7) & 0xfffffff8);\n        } else if (codetype === 0x08) {\n          offset = 16;\n        }\n\n        codes.push({\n          type: codetype,\n          address: address,\n          contents: payload.slice(pos, pos + offset),\n        });\n\n        pos += offset;\n      }\n\n      return {\n        contents: payload.slice(1),\n        codes: codes,\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number, bitmask = 0xff): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset) & bitmask;\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n\nexport function getGameEnd(slpFile: SlpFileType): GameEndType | null {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  if (!exists(gameEndPayloadSize) || gameEndPayloadSize <= 0) {\n    return null;\n  }\n\n  // Add one to account for command byte\n  const gameEndSize = gameEndPayloadSize + 1;\n  const gameEndPosition = rawDataPosition + rawDataLength - gameEndSize;\n\n  const buffer = new Uint8Array(gameEndSize);\n  readRef(ref, buffer, 0, buffer.length, gameEndPosition);\n  if (buffer[0] !== Command.GAME_END) {\n    // This isn't even a game end payload\n    return null;\n  }\n\n  const gameEndMessage = parseMessage(Command.GAME_END, buffer);\n  if (!gameEndMessage) {\n    return null;\n  }\n\n  return gameEndMessage as GameEndType;\n}\n\nexport function extractFinalPostFrameUpdates(slpFile: SlpFileType): PostFrameUpdateType[] {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n\n  // The following should exist on all replay versions\n  const postFramePayloadSize = messageSizes[Command.POST_FRAME_UPDATE];\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  const frameBookendPayloadSize = messageSizes[Command.FRAME_BOOKEND];\n\n  // Technically this should not be possible\n  if (!exists(postFramePayloadSize)) {\n    return [];\n  }\n\n  const gameEndSize = gameEndPayloadSize ? gameEndPayloadSize + 1 : 0;\n  const postFrameSize = postFramePayloadSize + 1;\n  const frameBookendSize = frameBookendPayloadSize ? frameBookendPayloadSize + 1 : 0;\n\n  let frameNum: number | null = null;\n  let postFramePosition = rawDataPosition + rawDataLength - gameEndSize - frameBookendSize - postFrameSize;\n  const postFrameUpdates: PostFrameUpdateType[] = [];\n  do {\n    const buffer = new Uint8Array(postFrameSize);\n    readRef(ref, buffer, 0, buffer.length, postFramePosition);\n    if (buffer[0] !== Command.POST_FRAME_UPDATE) {\n      break;\n    }\n\n    const postFrameMessage = parseMessage(Command.POST_FRAME_UPDATE, buffer) as PostFrameUpdateType | null;\n    if (!postFrameMessage) {\n      break;\n    }\n\n    if (frameNum === null) {\n      frameNum = postFrameMessage.frame;\n    } else if (frameNum !== postFrameMessage.frame) {\n      // If post frame message is found but the frame doesn't match, it's not part of the final frame\n      break;\n    }\n\n    postFrameUpdates.unshift(postFrameMessage);\n    postFramePosition -= postFrameSize;\n  } while (postFramePosition >= rawDataPosition);\n\n  return postFrameUpdates;\n}\n"],"names":["SlpInputSource","getRef","input","source","FILE","filePath","Error","fd","fs","openSync","fileDescriptor","BUFFER","buffer","readRef","ref","offset","length","position","readSync","copy","getLenRef","fileStats","fstatSync","size","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","closeSync","Uint8Array","charCodeAt","fileSize","rawDataLen","len","Command","MESSAGE_SIZES","payloadLength","messageSizesBuffer","i","command","getEnabledItems","view","offsets","enabledItems","reduce","acc","byteOffset","index","byte","readUint8","getGameInfoBlock","gameBitfield1","gameBitfield2","gameBitfield3","gameBitfield4","bombRainEnabled","selfDestructScoreValue","readInt8","itemSpawnBitfield1","itemSpawnBitfield2","itemSpawnBitfield3","itemSpawnBitfield4","itemSpawnBitfield5","damageRatio","readFloat","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","mapValues","splitMessageBuffer","commandByteBuffer","_commandByteBuffer$","commandByte","undefined","advanceAmount","SPLIT_MESSAGE","_readUint","_readUint2","DataView","readUint16","isLastMessage","readBool","internalCommand","appendBuf","slice","mergedBuf","set","_splitMessageBuffer$","parsedPayload","parseMessage","shouldStop","payload","GAME_START","getPlayerObject","playerIndex","cfOffset","dashback","readUint32","shieldDrop","controllerFix","nametagLength","nametagOffset","nametagStart","nametagBuf","nameTagString","iconv","decode","split","shift","nametag","toHalfwidth","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdLength","userIdOffset","userIdStart","userIdBuf","userIdString","userId","playerInfo","port","characterId","type","startStocks","characterColor","teamShade","handicap","teamId","staminaMode","Boolean","silentCharacter","lowGravity","invisible","blackStockIcon","metal","startOnAngelPlatform","rumbleEnabled","cpuLevel","offenseRatio","defenseRatio","modelScale","matchIdLength","matchIdStart","matchIdBuf","matchIdString","matchId","gameSettings","slpVersion","timerType","inGameMode","friendlyFireEnabled","isTeams","itemSpawnBehavior","stageId","startingTimerSeconds","players","map","scene","gameMode","language","gameInfoBlock","randomSeed","isPAL","isFrozenPS","matchInfo","gameNumber","tiebreakerNumber","FRAME_START","frame","readInt32","seed","sceneFrameCounter","PRE_FRAME_UPDATE","isFollower","actionStateId","positionX","positionY","facingDirection","joystickX","joystickY","cStickX","cStickY","trigger","buttons","physicalButtons","physicalLTrigger","physicalRTrigger","rawJoystickX","percent","POST_FRAME_UPDATE","selfInducedSpeeds","airX","y","attackX","attackY","groundX","internalCharacterId","shieldSize","lastAttackLanded","currentComboCount","lastHitBy","stocksRemaining","actionStateCounter","miscActionState","isAirborne","lastGroundId","jumpsRemaining","lCancelStatus","hurtboxCollisionState","hitlagRemaining","animationIndex","instanceHitBy","instanceId","ITEM_UPDATE","typeId","state","velocityX","velocityY","damageTaken","expirationTimer","spawnId","missileType","turnipFace","chargeShotLaunched","chargePower","owner","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","placements","gameEndMethod","lrasInitiatorIndex","GECKO_LIST","codes","pos","_readUint3","word1","codetype","address","_readUint4","lineCount","_readUint5","byteLen","push","contents","canReadFromView","viewLength","byteLength","getFloat32","getInt32","getInt8","getUint32","getUint16","bitmask","getUint8","getMetadata","metadata","ex","getGameEnd","gameEndPayloadSize","exists","gameEndSize","gameEndPosition","gameEndMessage","extractFinalPostFrameUpdates","postFramePayloadSize","frameBookendPayloadSize","postFrameSize","frameBookendSize","frameNum","postFramePosition","postFrameUpdates","postFrameMessage","unshift"],"mappings":"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"}