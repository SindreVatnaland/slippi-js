{"version":3,"file":"SlippiGame.esm.js","sources":["../src/SlippiGame.ts"],"sourcesContent":["import type { StadiumStatsType, StatOptions, StatsType } from \"./stats\";\nimport { TargetBreakComputer } from \"./stats\";\nimport {\n  ActionsComputer,\n  ComboComputer,\n  ConversionComputer,\n  generateOverallStats,\n  InputComputer,\n  Stats,\n  StockComputer,\n} from \"./stats\";\nimport type {\n  EnabledItemType,\n  EventCallbackFunc,\n  FrameEntryType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  MetadataType,\n  PlacementType,\n  PostFrameUpdateType,\n  RollbackFrames,\n} from \"./types\";\nimport { GameEndMethod, GameMode } from \"./types\";\nimport { getWinners } from \"./utils/getWinners\";\nimport { extractDistanceInfoFromFrame } from \"./utils/homeRunDistance\";\nimport { SlpParser, SlpParserEvent } from \"./utils/slpParser\";\nimport type { SlpFileType, SlpReadInput } from \"./utils/slpReader\";\nimport {\n  closeSlpFile,\n  extractFinalPostFrameUpdates,\n  getGameEnd,\n  getMetadata,\n  iterateEvents,\n  openSlpFile,\n  SlpInputSource,\n} from \"./utils/slpReader\";\n\n/**\n * Slippi Game class that wraps a file\n */\nexport class SlippiGame {\n  private input: SlpReadInput;\n  private metadata: MetadataType | null = null;\n  private finalStats: StatsType | null = null;\n  private parser: SlpParser;\n  private readPosition: number | null = null;\n  private actionsComputer: ActionsComputer = new ActionsComputer();\n  private conversionComputer: ConversionComputer = new ConversionComputer();\n  private comboComputer: ComboComputer = new ComboComputer();\n  private stockComputer: StockComputer = new StockComputer();\n  private inputComputer: InputComputer = new InputComputer();\n  private targetBreakComputer: TargetBreakComputer = new TargetBreakComputer();\n  protected statsComputer: Stats;\n\n  public constructor(input: string | Buffer | ArrayBuffer, opts?: StatOptions) {\n    if (typeof input === \"string\") {\n      this.input = {\n        source: SlpInputSource.FILE,\n        filePath: input,\n      };\n    } else if (input instanceof Buffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: input,\n      };\n    } else if (input instanceof ArrayBuffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: Buffer.from(input),\n      };\n    } else {\n      throw new Error(\"Cannot create SlippiGame with input of that type\");\n    }\n\n    // Set up stats calculation\n    this.statsComputer = new Stats(opts);\n    this.statsComputer.register(\n      this.actionsComputer,\n      this.comboComputer,\n      this.conversionComputer,\n      this.inputComputer,\n      this.stockComputer,\n      this.targetBreakComputer,\n    );\n\n    this.parser = new SlpParser();\n    this.parser.on(SlpParserEvent.SETTINGS, (settings) => {\n      this.statsComputer.setup(settings);\n    });\n\n    // Use finalized frames for stats computation\n    this.parser.on(SlpParserEvent.FINALIZED_FRAME, (frame: FrameEntryType) => {\n      this.statsComputer.addFrame(frame);\n    });\n  }\n\n  private _process(shouldStop: EventCallbackFunc = () => false, file?: SlpFileType): void {\n    if (this.parser.getGameEnd() !== null) {\n      return;\n    }\n    const slpfile = file ?? openSlpFile(this.input);\n    // Generate settings from iterating through file\n    this.readPosition = iterateEvents(\n      slpfile,\n      (command, payload) => {\n        if (!payload) {\n          // If payload is falsy, keep iterating. The parser probably just doesn't know\n          // about this command yet\n          return false;\n        }\n        this.parser.handleCommand(command, payload);\n        return shouldStop(command, payload);\n      },\n      this.readPosition,\n    );\n    if (!file) {\n      closeSlpFile(slpfile);\n    }\n  }\n\n  /**\n   * Gets the game settings, these are the settings that describe the starting state of\n   * the game such as characters, stage, etc.\n   */\n  public getSettings(): GameStartType | null {\n    // Settings is only complete after post-frame update\n    this._process(() => this.parser.getSettings() !== null);\n    return this.parser.getSettings();\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    this._process();\n    return this.parser.getItems();\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    this._process();\n    return this.parser.getLatestFrame();\n  }\n\n  public getGameEnd(options: { skipProcessing?: boolean } = {}): GameEndType | null {\n    if (options?.skipProcessing) {\n      // Read game end block directly\n      const slpfile = openSlpFile(this.input);\n      const gameEnd = getGameEnd(slpfile);\n      closeSlpFile(slpfile);\n      return gameEnd;\n    }\n\n    this._process();\n    return this.parser.getGameEnd();\n  }\n\n  public getFrames(): FramesType {\n    this._process();\n    return this.parser.getFrames();\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    this._process();\n    return this.parser.getRollbackFrames();\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    this._process(() => this.parser.getGeckoList() !== null);\n    return this.parser.getGeckoList();\n  }\n\n  public getStats(): StatsType | null {\n    if (this.finalStats) {\n      return this.finalStats;\n    }\n\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    // Finish processing if we're not up to date\n    this.statsComputer.process();\n    const inputs = this.inputComputer.fetch();\n    const stocks = this.stockComputer.fetch();\n    const conversions = this.conversionComputer.fetch();\n    const playableFrameCount = this.parser.getPlayableFrameCount();\n    const overall = generateOverallStats({ settings, inputs, conversions, playableFrameCount });\n\n    const gameEnd = this.parser.getGameEnd();\n    const gameComplete = gameEnd !== null;\n\n    const stats: StatsType = {\n      lastFrame: this.parser.getLatestFrameNumber(),\n      playableFrameCount,\n      stocks: stocks,\n      conversions: conversions,\n      combos: this.comboComputer.fetch(),\n      actionCounts: this.actionsComputer.fetch(),\n      overall: overall,\n      gameComplete,\n    };\n\n    if (gameComplete) {\n      // If the game is complete, store a cached version of stats because it should not\n      // change anymore. Ideally the statsCompuer.process and fetch functions would simply do no\n      // work in this case instead but currently the conversions fetch function,\n      // generateOverallStats, and maybe more are doing work on every call.\n      this.finalStats = stats;\n    }\n\n    return stats;\n  }\n\n  public getStadiumStats(): StadiumStatsType | null {\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    const latestFrame = this.parser.getLatestFrame();\n    const players = latestFrame?.players;\n\n    if (!players) {\n      return null;\n    }\n\n    this.statsComputer.process();\n\n    switch (settings.gameMode) {\n      case GameMode.TARGET_TEST:\n        return {\n          type: \"target-test\",\n          targetBreaks: this.targetBreakComputer.fetch(),\n        };\n      case GameMode.HOME_RUN_CONTEST:\n        const distanceInfo = extractDistanceInfoFromFrame(settings, latestFrame);\n        if (!distanceInfo) {\n          return null;\n        }\n\n        return {\n          type: \"home-run-contest\",\n          distance: distanceInfo.distance,\n          units: distanceInfo.units,\n        };\n      default:\n        return null;\n    }\n  }\n\n  public getMetadata(): MetadataType | null {\n    if (this.metadata) {\n      return this.metadata;\n    }\n    const slpfile = openSlpFile(this.input);\n    this.metadata = getMetadata(slpfile);\n    closeSlpFile(slpfile);\n    return this.metadata;\n  }\n\n  public getFilePath(): string | null {\n    if (this.input.source !== SlpInputSource.FILE) {\n      return null;\n    }\n\n    return this.input.filePath ?? null;\n  }\n\n  public getWinners(): PlacementType[] {\n    // Read game end block directly\n    const slpfile = openSlpFile(this.input);\n    const gameEnd = getGameEnd(slpfile);\n    this._process(() => this.parser.getSettings() !== null, slpfile);\n    const settings = this.parser.getSettings();\n    if (!gameEnd || !settings) {\n      // Technically using the final post frame updates, it should be possible to compute winners for\n      // replays without a gameEnd message. But I'll leave this here anyway\n      closeSlpFile(slpfile);\n      return [];\n    }\n\n    // If we went to time, let's fetch the post frame updates to compute the winner\n    let finalPostFrameUpdates: PostFrameUpdateType[] = [];\n    if (gameEnd.gameEndMethod === GameEndMethod.TIME) {\n      finalPostFrameUpdates = extractFinalPostFrameUpdates(slpfile);\n    }\n\n    closeSlpFile(slpfile);\n    return getWinners(gameEnd, settings, finalPostFrameUpdates);\n  }\n}\n"],"names":["SlippiGame","constructor","input","opts","metadata","finalStats","parser","readPosition","actionsComputer","ActionsComputer","conversionComputer","ConversionComputer","comboComputer","ComboComputer","stockComputer","StockComputer","inputComputer","InputComputer","targetBreakComputer","TargetBreakComputer","statsComputer","source","SlpInputSource","FILE","filePath","Buffer","BUFFER","buffer","ArrayBuffer","from","Error","Stats","register","SlpParser","on","SlpParserEvent","SETTINGS","settings","setup","FINALIZED_FRAME","frame","addFrame","_process","shouldStop","file","getGameEnd","slpfile","openSlpFile","iterateEvents","command","payload","handleCommand","closeSlpFile","getSettings","getItems","getLatestFrame","options","skipProcessing","gameEnd","getFrames","getRollbackFrames","getGeckoList","getStats","process","inputs","fetch","stocks","conversions","playableFrameCount","getPlayableFrameCount","overall","generateOverallStats","gameComplete","stats","lastFrame","getLatestFrameNumber","combos","actionCounts","getStadiumStats","latestFrame","players","gameMode","GameMode","TARGET_TEST","type","targetBreaks","HOME_RUN_CONTEST","distanceInfo","extractDistanceInfoFromFrame","distance","units","getMetadata","getFilePath","_this$input$filePath","getWinners","finalPostFrameUpdates","gameEndMethod","GameEndMethod","TIME","extractFinalPostFrameUpdates"],"mappings":"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"}